"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[8974],{5164:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var a=r(74848),o=r(28453);r(42821),r(70503);const t={sidebar_position:1,title:"Mapping leaderboard IDs to strings",sidebar_label:"Mapping leaderboard IDs to strings",description:"Learn how to map numeric leaderboard IDs to arbitrary strings.",keywords:["momento","leaderboard","gaming","serverless"]},s="\u6570\u5024\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9ID\u3092\u4efb\u610f\u306e\u6587\u5b57\u5217\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u65b9\u6cd5",d={id:"leaderboards/patterns/map-id-to-string",title:"Mapping leaderboard IDs to strings",description:"Learn how to map numeric leaderboard IDs to arbitrary strings.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/leaderboards/patterns/map-id-to-string.md",sourceDirName:"leaderboards/patterns",slug:"/leaderboards/patterns/map-id-to-string",permalink:"/ja/leaderboards/patterns/map-id-to-string",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/leaderboards/patterns/map-id-to-string.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Mapping leaderboard IDs to strings",sidebar_label:"Mapping leaderboard IDs to strings",description:"Learn how to map numeric leaderboard IDs to arbitrary strings.",keywords:["momento","leaderboard","gaming","serverless"]},sidebar:"leaderboardSidebar",previous:{title:"Patterns"},next:{title:"Quotas and Limits",permalink:"/ja/leaderboards/limits"}},i={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\u6570\u5024\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9id\u3092\u4efb\u610f\u306e\u6587\u5b57\u5217\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u65b9\u6cd5",children:"\u6570\u5024\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9ID\u3092\u4efb\u610f\u306e\u6587\u5b57\u5217\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u65b9\u6cd5"})}),"\n",(0,a.jsx)(n.p,{children:"Momento Leaderboards\u306e\u8981\u7d20\u306f\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u8b58\u5225\u5b50\u3001\u30bb\u30c3\u30b7\u30e7\u30f3\u8b58\u5225\u5b50\u3001\u30d6\u30e9\u30a6\u30b6\u8b58\u5225\u5b50\u3001\u307e\u305f\u306f\u305d\u306e\u4ed6\u306e\u4f7f\u7528\u3057\u305f\u3044\u8b58\u5225\u5b50\u3092\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u7b26\u53f7\u306a\u305764\u30d3\u30c3\u30c8\u756a\u53f7\u306b\u3088\u3063\u3066\u4e00\u610f\u306b\u8b58\u5225\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u304c2\u3064\u306eID\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u9650\u308a\u30011\u4eba\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u5bfe\u3057\u30662\u3064\u306e\u30b9\u30b3\u30a2\u3092\u6301\u3064\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff01"}),"\n",(0,a.jsx)(n.p,{children:"\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001\u305d\u306eID\u3092\u4ed6\u306e\u60c5\u5831\u3001\u305f\u3068\u3048\u3070\u9078\u624b\u306e\u540d\u524d\u306a\u3069\u3068\u95a2\u9023\u4ed8\u3051\u3066\u3001\u3088\u308a\u4eba\u9593\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9\u8868\u793a\u306b\u3057\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u8f9e\u66f8\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3068ID\u3092\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import {\n  PreviewLeaderboardClient,\n  LeaderboardConfigurations,\n  CredentialProvider,\n  CacheClient,\n  Configurations,\n  CreateCache,\n  LeaderboardDelete,\n  LeaderboardFetch,\n  LeaderboardOrder,\n  LeaderboardUpsert,\n} from '@gomomento/sdk';\n\nasync function main() {\n  // 1. Create a CacheClient to connect to Momento\n  const cacheClient = await CacheClient.create({\n    configuration: Configurations.Laptop.v1(),\n    credentialProvider: CredentialProvider.fromEnvironmentVariable({\n      environmentVariableName: 'MOMENTO_API_KEY',\n    }),\n    defaultTtlSeconds: 60,\n  });\n\n  // 2. Create a cache for the leaderboard to live in\n  const createCacheResponse = await cacheClient.createCache('my-cache');\n  if (createCacheResponse instanceof CreateCache.AlreadyExists) {\n    console.log('cache already exists');\n  } else if (createCacheResponse instanceof CreateCache.Error) {\n    throw createCacheResponse.innerException();\n  }\n\n  // 3. Create a Leaderboard client\n  const client = new PreviewLeaderboardClient({\n    configuration: LeaderboardConfigurations.Laptop.v1(),\n    credentialProvider: CredentialProvider.fromEnvironmentVariable({\n      environmentVariableName: 'MOMENTO_API_KEY',\n    }),\n  });\n\n  // 4. Create a leaderboard with given cache and leaderboard names\n  const leaderboard = client.leaderboard('my-cache', 'my-leaderboard');\n\n  // 5. Create a mapping between element IDs and arbitrary strings\n  const id2name: Record<number, string> = {\n    123: 'Alice',\n    456: 'Bob',\n    789: 'Charlie',\n    1234: 'David',\n    5678: 'Eve',\n  };\n\n  // 6. Upsert the elements along with some scores\n  let upsertElements: Record<number, number> = {}\n  for (const id of Object.keys(id2name)) {\n    upsertElements[Number(id)] = Math.floor(Math.random() * 1000);\n  }\n  const upsertResponse = await leaderboard.upsert(upsertElements);\n  if (upsertResponse instanceof LeaderboardUpsert.Success) {\n    console.log('Upsert success!');\n  } else if (upsertResponse instanceof LeaderboardUpsert.Error) {\n    console.log('Upsert error:', upsertResponse.message());\n  }\n\n  // 7. Fetch the top 5 elements in the leaderboard and print scores and corresponding strings\n  const fetchResponse = await leaderboard.fetchByRank(0, 5, { order: LeaderboardOrder.Descending });\n  if (fetchResponse instanceof LeaderboardFetch.Success) {\n    const elements = fetchResponse.values();\n    console.log('------------Top 5 Leaderboard-------------');\n    console.log('------------------------------------------');\n    for (const element of elements) {\n      console.log(`${id2name[element.id]}: ${element.score}`);\n    }\n    console.log('------------------------------------------');\n  } else if (fetchResponse instanceof LeaderboardFetch.Error) {\n    console.log('Fetch error:', fetchResponse.message());\n  }\n\n  // 8. Delete the entire leaderboard when done.\n  // Leaderboard items have a default 7-day TTL so make sure to clean up\n  // all unnecessary elements when no longer needed.\n  const deleteResp = await leaderboard.delete();\n  if (deleteResp instanceof LeaderboardDelete.Success) {\n    console.log('Delete leaderboard success');\n  } else if (deleteResp instanceof LeaderboardDelete.Error) {\n    console.log('Delete leaderboard error:', deleteResp.message());\n  }\n}\n\nmain()\n  .then(() => {\n    console.log('Leaderboard example completed!');\n    exit();\n  })\n  .catch((e: Error) => {\n    console.error(`Uncaught exception while running example: ${e.message}`);\n    throw e;\n  });\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u4f8b\u984c\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\uff1a"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"------------Top 5 Leaderboard-------------\n------------------------------------------\nBob: 772\nCharlie: 685\nDavid: 483\nAlice: 450\nEve: 13\n------------------------------------------\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},42821:(e,n,r)=>{r(96540)},70503:(e,n,r)=>{r.d(n,{F:()=>t});var a=r(21432),o=(r(96540),r(74848));const t=e=>{let{language:n,code:r}=e;return(0,o.jsx)(a.default,{language:n,children:r})}}}]);