"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[184],{82312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(74848),s=n(28453),o=(n(51441),n(35347));const i={sidebar_position:1,title:"API reference information",pagination_prev:null,sidebar_label:"API Reference",description:"Learn the API calls you need to know and how to use them with Momento Storage."},l="Momento Storage\u306eAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",a={id:"storage/develop/api-reference/index",title:"API reference information",description:"Learn the API calls you need to know and how to use them with Momento Storage.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/storage/develop/api-reference/index.mdx",sourceDirName:"storage/develop/api-reference",slug:"/storage/develop/api-reference/",permalink:"/ja/storage/develop/api-reference/",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/storage/develop/api-reference/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"API reference information",pagination_prev:null,sidebar_label:"API Reference",description:"Learn the API calls you need to know and how to use them with Momento Storage."},sidebar:"storageSidebar",next:{title:"language-support",permalink:"/ja/storage/develop/api-reference/language-support"}},d={},c=[{value:"Control APIs",id:"control-apis",level:2},{value:"\u30b9\u30c8\u30a2\u306e\u4f5c\u6210",id:"\u30b9\u30c8\u30a2\u306e\u4f5c\u6210",level:3},{value:"\u30b9\u30c8\u30a2\u306e\u524a\u9664",id:"\u30b9\u30c8\u30a2\u306e\u524a\u9664",level:3},{value:"\u30b9\u30c8\u30a2\u306e\u30ea\u30b9\u30c8",id:"\u30b9\u30c8\u30a2\u306e\u30ea\u30b9\u30c8",level:3},{value:"Data APIs",id:"data-apis",level:2},{value:"Put",id:"put",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3},{value:"SDK\u306b\u304a\u3051\u308bAPI\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6",id:"sdk\u306b\u304a\u3051\u308bapi\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6",level:2},{value:"sidebar_position: 12\nsidebar_label: Language Support\ntitle: Language API Support Matrix\ndescription: A reference as to which Momento SDK languages support each API\npagination_next: null",id:"sidebar_position-12sidebar_label-language-supporttitle-language-api-support-matrixdescription-a-reference-as-to-which-momento-sdk-languages-support-each-apipagination_next-null",level:2},{value:"Momento SDK\u306b\u304a\u3051\u308b\u30b9\u30c8\u30ec\u30fc\u30b8API\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6",id:"momento-sdk\u306b\u304a\u3051\u308b\u30b9\u30c8\u30ec\u30fc\u30b8api\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"momento-storage\u306eapi\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",children:"Momento Storage\u306eAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"})}),"\n",(0,r.jsx)(t.h2,{id:"control-apis",children:"Control APIs"}),"\n",(0,r.jsx)(t.p,{children:"\u3053\u308c\u3089\u306eAPI\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30b9\u30c8\u30a2\u306e\u7ba1\u7406\u3068\u5236\u5fa1\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002"}),"\n",(0,r.jsx)(t.h3,{id:"\u30b9\u30c8\u30a2\u306e\u4f5c\u6210",children:"\u30b9\u30c8\u30a2\u306e\u4f5c\u6210"}),"\n",(0,r.jsx)(t.p,{children:"\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u306e\u30b9\u30c8\u30a2\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsx)(t.p,{children:"\u5c5e\u6027:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"storeName"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u4f5c\u6210\u3055\u308c\u308b\u30b9\u30c8\u30a2\u306e\u540d\u524d\u3002"})]})})]}),"\n",(0,r.jsx)(o.r,{js:"const result = await storageClient.createStore(storeName);\nswitch (result.type) {\n  case CreateStoreResponse.AlreadyExists:\n    console.log(`Store '${storeName}' already exists`);\n    break;\n  case CreateStoreResponse.Success:\n    console.log(`Store '${storeName}' created`);\n    break;\n  case CreateStoreResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to create store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:'final CreateStoreResponse response = storageClient.createStore("test-store").join();\nif (response instanceof CreateStoreResponse.Success) {\n  System.out.println("Store \'test-store\' created");\n} else if (response instanceof CreateStoreResponse.Error error) {\n  if (error.getCause() instanceof StoreAlreadyExistsException) {\n    System.out.println("Store \'test-store\' already exists");\n  } else {\n    throw new RuntimeException(\n        "An error occurred while attempting to create store \'test-store\': "\n            + error.getErrorCode(),\n        error);\n  }\n}',kotlin:"",go:'resp, err := storageClient.CreateStore(ctx, &momento.CreateStoreRequest{\n\tStoreName: storeName,\n})\nif err != nil {\n\tpanic(err)\n}\n\nswitch resp.(type) {\ncase *responses.CreateStoreSuccess:\n\tfmt.Printf("Successfully created store %s\\n", storeName)\ncase *responses.CreateStoreAlreadyExists:\n\tfmt.Printf("Store %s already exists\\n", storeName)\n}',csharp:"",php:'\n$create_store_response = $storage_client->createStore($store_name);\nif ($create_store_response->asSuccess()) {\n    print("Store $store_name created\\n");\n} elseif ($create_store_response->asAlreadyExists()) {\n    print("Store $store_name already exists\\n");\n} elseif ($err = $create_store_response->asError()) {\n    print("An error occurred while attempting to create $store_name: {$err->errorCode()} - {$err->message()}\\n");\n}',rust:'  let response = storage_client.create_store(store_name).await?;\n  match response {\n      momento::storage::CreateStoreResponse::Created => println!("Store {} created", store_name),\n      momento::storage::CreateStoreResponse::AlreadyExists => println!("Store {} already exists", store_name),\n  }',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,r.jsx)(t.h3,{id:"\u30b9\u30c8\u30a2\u306e\u524a\u9664",children:"\u30b9\u30c8\u30a2\u306e\u524a\u9664"}),"\n",(0,r.jsx)(t.p,{children:"\u30b9\u30c8\u30a2\u3092\u524a\u9664\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsx)(t.p,{children:"\u5c5e\u6027:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"storeName"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u524a\u9664\u3059\u308b\u30b9\u30c8\u30a2\u306e\u540d\u524d\u3002"})]})})]}),"\n",(0,r.jsx)(o.r,{js:"const result = await storageClient.deleteStore(storeName);\nswitch (result.type) {\n  case DeleteStoreResponse.Success:\n    console.log(`Store '${storeName}' deleted`);\n    break;\n  case DeleteStoreResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to delete store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:'final DeleteStoreResponse response = storageClient.deleteStore("test-store").join();\nif (response instanceof DeleteStoreResponse.Success) {\n  System.out.println("Store \'test-store\' deleted");\n} else if (response instanceof DeleteStoreResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to delete store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:"_, err := storageClient.DeleteStore(ctx, &momento.DeleteStoreRequest{\n\tStoreName: storeName,\n})\nif err != nil {\n\tpanic(err)\n}",csharp:"",php:'\n$delete_store_response = $storage_client->deleteStore($store_name);\nif ($err = $delete_store_response->asError()) {\n    print("An error occurred while attempting to delete $store_name: {$err->errorCode()} - {$err->message()}\\n");\n} else {\n    print("Store $store_name deleted\\n");\n}',rust:'  storage_client.delete_store(store_name).await?;\n  println!("Store {} deleted", store_name);',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,r.jsx)(t.h3,{id:"\u30b9\u30c8\u30a2\u306e\u30ea\u30b9\u30c8",children:"\u30b9\u30c8\u30a2\u306e\u30ea\u30b9\u30c8"}),"\n",(0,r.jsx)(t.p,{children:"\u5168\u3066\u306e\u30b9\u30c8\u30a2\u3092\u30ea\u30b9\u30c8\u3057\u307e\u3059"}),"\n",(0,r.jsx)(o.r,{js:"const result = await storageClient.listStores();\nswitch (result.type) {\n  case ListStoresResponse.Success:\n    console.log(\n      `Stores:\\n${result\n        .stores()\n        .map(c => c.getName())\n        .join('\\n')}\\n\\n`\n    );\n    break;\n  case ListStoresResponse.Error:\n    throw new Error(`An error occurred while attempting to list stores: ${result.errorCode()}: ${result.toString()}`);\n}",python:"",java:'final ListStoresResponse response = storageClient.listStores().join();\nif (response instanceof ListStoresResponse.Success success) {\n  final String stores =\n      success.getStores().stream().map(StoreInfo::getName).collect(Collectors.joining("\\n"));\n  System.out.println("Stores:\\n" + stores);\n} else if (response instanceof ListStoresResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to list stores: " + error.getErrorCode(), error);\n}',kotlin:"",go:'resp, err := storageClient.ListStores(ctx, &momento.ListStoresRequest{})\nif err != nil {\n\tpanic(err)\n}\n\nswitch r := resp.(type) {\ncase *responses.ListStoresSuccess:\n\tlog.Printf("Found stores:\\n")\n\tfor _, store := range r.Stores() {\n\t\tlog.Printf("\\tStore name: %s\\n", store.Name())\n\t}\n}',csharp:"",php:'\n$list_stores_response = $storage_client->listStores();\nif ($listSuccess = $list_stores_response->asSuccess()) {\n    print("Found stores:\\n");\n    foreach ($listSuccess->stores() as $store) {\n        $store_name = $store->name();\n        print("- $store_name\\n");\n    }\n} elseif ($err = $list_stores_response->asError()) {\n    print("An error occurred while attempting to list stores: {$err->errorCode()} - {$err->message()}\\n");\n}',rust:'  let response = storage_client.list_stores().await?;\n  println!("Stores: {:#?}", response.stores);',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,r.jsx)(t.h2,{id:"data-apis",children:"Data APIs"}),"\n",(0,r.jsx)(t.p,{children:"\u3053\u308c\u3089\u306eAPI\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30b9\u30c8\u30a2\u5185\u306e\u30c7\u30fc\u30bf\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002"}),"\n",(0,r.jsx)(t.h3,{id:"put",children:"Put"}),"\n",(0,r.jsx)(t.p,{children:"\u5024\u3092\u30b9\u30c8\u30a2\u306b\u5165\u308c\u308b\u3002\u3053\u306e\u30ad\u30fc\u306e\u5024\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u65b0\u3057\u3044\u5024\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"storeName"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u30b9\u30c8\u30a2\u306e\u540d\u524d"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"key"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u5024\u3092\u8ffd\u52a0\u3059\u308b\u30ad\u30fc"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"value"}),(0,r.jsx)(t.td,{children:"String / Bytes / Integer / Double"}),(0,r.jsx)(t.td,{children:"\u4fdd\u5b58\u3059\u308b\u5024"})]})]})]}),"\n",(0,r.jsx)(o.r,{js:"// to store a string value:\nconst result = await storageClient.putString(storeName, 'test-key', 'test-value');\nswitch (result.type) {\n  case StoragePutResponse.Success:\n    console.log(\"Key 'test-key' stored successfully\");\n    break;\n  case StoragePutResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to store key 'test-key' in store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}\n\n// Momento storage also supports these other data types:\nawait storageClient.putInt(storeName, 'test-key', 42);\nawait storageClient.putDouble(storeName, 'test-key', 3.14);\nawait storageClient.putBytes(storeName, 'test-key', Buffer.from('test-value'));",python:"",java:'// this example illustrates how to store a String value\nfinal PutResponse response = storageClient.put("test-store", "test-key", "test-value").join();\nif (response instanceof PutResponse.Success) {\n  System.out.println("Key \'test-key\' stored successfully");\n} else if (response instanceof PutResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to store key \'test-key\' in store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}\n\n// Momento Storage also supports storing values of type byte[], long, and double:\nbyte[] bytesValue = "test-byte-array-value".getBytes(StandardCharsets.UTF_8);\nstorageClient.put("test-store", "test-byte-array-key", bytesValue).join();\nstorageClient.put("test-store", "test-integer-key", 42L).join();\nstorageClient.put("test-store", "test-double-key", 42.0).join();',kotlin:"",go:'_, err := storageClient.Put(ctx, &momento.StoragePutRequest{\n\tStoreName: storeName,\n\tKey:       "key",\n\tValue:     storageTypes.String("my-value"),\n})\nif err != nil {\n\tpanic(err)\n}\n\n// Momento storage also supports these other data types:\nstorageClient.Put(ctx, &momento.StoragePutRequest{\n\tStoreName: storeName,\n\tKey:       "key",\n\tValue:     storageTypes.Int(42),\n})\nstorageClient.Put(ctx, &momento.StoragePutRequest{\n\tStoreName: storeName,\n\tKey:       "key",\n\tValue:     storageTypes.Float(3.14),\n})\nstorageClient.Put(ctx, &momento.StoragePutRequest{\n\tStoreName: storeName,\n\tKey:       "key",\n\tValue:     storageTypes.Bytes{0x01, 0x02, 0x03},\n})',csharp:"",php:'\n$put_response = $storage_client->putString($store_name, "test-key", "test-value");\nif ($put_response->asSuccess()) {\n    print("Key \'test-key\' stored successfully\\n");\n} elseif ($err = $put_response->asError()) {\n    print("An error occurred while attempting to store \'test-key\': {$err->errorCode()} - {$err->message()}\\n");\n}\n\n// Momento storage also supports int, float, and bytes types.\n// Because strings in PHP are a series of bytes, the putBytes method accepts a string as the value.\n$put_response = $storage_client->putBytes($store_name, "test-key", "test-value");\n$put_response = $storage_client->putInt($store_name, "test-key", 42);\n$put_response = $storage_client->putFloat($store_name, "test-key", 3.14);',rust:'  storage_client.put(store_name, "key", "value").await?;\n  println!("Put key and value in store {}", store_name);',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,r.jsx)(t.h3,{id:"get",children:"Get"}),"\n",(0,r.jsx)(t.p,{children:"\u4e0e\u3048\u3089\u308c\u305f\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"storeName"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u30b9\u30c8\u30a2\u306e\u540d\u524d"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"key"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u5024\u3092\u53d6\u5f97\u3059\u308b\u30ad\u30fc"})]})]})]}),"\n",(0,r.jsx)(o.r,{js:"const getResponse = await storageClient.get(storeName, 'test-key');\n// simplified style; assume the value was found, and that it was a string\nconsole.log(`string hit: ${getResponse.value()!.string()!}`);\n\n// if the value was an integer:\nconst integerGetResponse = await storageClient.get(storeName, 'test-integer-key');\nconsole.log(`integer hit: ${integerGetResponse.value()!.int()!}`);\n\n// pattern-matching style; safer for production code\nswitch (getResponse.type) {\n  case StorageGetResponse.Found:\n    // if you know the value is a string:\n    console.log(`Retrieved value for key 'test-key': ${getResponse.value().string()!}`);\n    break;\n  case StorageGetResponse.NotFound:\n    console.log(`Key 'test-key' was not found in store '${storeName}'`);\n    break;\n  case StorageGetResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to get key 'test-key' from store '${storeName}': ${getResponse.errorCode()}: ${getResponse.toString()}`\n    );\n}",python:"",java:'final GetResponse response = storageClient.get("test-store", "test-key").join();\n\n// simplified style to access the value, if you\'re confident the value exists and you know the\n// type.\n// The optionals in this chain will throw exceptions when you call `.get()` if the item did not\n// exist in the store, or is another type besides a String\nfinal String value = response.valueWhenFound().get().getString().get();\n\n// Or, you can use pattern-matching for more production-safe code:\nif (response instanceof GetResponse.Found found) {\n  // if you know the value is a String:\n  String stringValue =\n      found\n          .value()\n          .getString()\n          .orElseThrow(() -> new RuntimeException("Value was not a String!"));\n  // if you don\'t know the type of the value:\n  switch (found.value().getType()) {\n    case STRING -> System.out.println("String value: " + found.value().getString().get());\n    case BYTE_ARRAY -> System.out.println(\n        "Byte array value: " + found.value().getByteArray().get());\n    case LONG -> System.out.println("Long value: " + found.value().getLong().get());\n    case DOUBLE -> System.out.println("Double value: " + found.value().getDouble().get());\n  }\n} else if (response instanceof GetResponse.NotFound) {\n  System.out.println("Key \'test-key\' was not found in store \'test-store\'");\n} else if (response instanceof GetResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to get key \'test-key\' from store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:'getResp, err := storageClient.Get(ctx, &momento.StorageGetRequest{\n\tStoreName: storeName,\n\tKey:       "key",\n})\nif err != nil {\n\tpanic(err)\n}\n\n// If the value was not found, the response\'s Value will be nil.\nif getResp.Value() == nil {\n\tfmt.Println("Got nil")\n}\n\n// If you know the type you\'re expecting, you can assert it directly:\nintVal, ok := getResp.Value().(storageTypes.Int)\nif !ok {\n\tfmt.Printf("Not an integer, received type: %T\\n", getResp.Value())\n} else {\n\tfmt.Printf("Got the integer %d\\n", intVal)\n}\n\n// Use switch if you don\'t know the type beforehand:\nswitch t := getResp.Value().(type) {\ncase storageTypes.String:\n\tfmt.Printf("Got the string %s\\n", t)\ncase storageTypes.Bytes:\n\tfmt.Printf("Got the bytes %b\\n", t)\ncase storageTypes.Float:\n\tfmt.Printf("Got the float %f\\n", t)\ncase storageTypes.Int:\n\tfmt.Printf("Got the integer %d\\n", t)\ncase nil:\n\tfmt.Println("Got nil")\n}',csharp:"",php:'\n$get_response = $storage_client->get($store_name, "test-key");\nif ($found = $get_response->asFound()) {\n    $value_type = $found->type();\n    if ($value_type == StorageValueType::STRING) {\n        print("Got string value: " . $found->valueString() . "\\n");\n    } elseif ($value_type == StorageValueType::INT) {\n        print("Got integer value: " . $found->valueInt() . "\\n");\n    } elseif ($value_type == StorageValueType::FLOAT) {\n        print("Got float value: " . $found->valueFloat() . "\\n");\n    } elseif ($value_type == StorageValueType::BYTES) {\n        // This case is not expected in this example as PHP doesn\'t have a native byte type\n        print("Got bytes value: " . $found->valueBytes() . "\\n");\n    }\n    // You may also pull the value directly from the response without type checking\n    print("Retrieved value for key \'test-key\': {$get_response->value()}\\n");\n} elseif ($get_response->asNotFound()) {\n    print("Key \'test-key\' was not found in store $store_name\\n");\n} elseif ($err = $get_response->asError()) {\n    print("An error occurred while attempting to get key \'test-key\' from store $store_name: {$err->errorCode()} - {$err->message()}\\n");\n}',rust:'  let response = storage_client.get(store_name, "key").await?;\n  match response {\n      momento::storage::GetResponse::NotFound => println!("Key not found in {}", store_name),\n      momento::storage::GetResponse::Found { value } => {\n          // A Found response indicates the value was found in the store.\n\n          // Use `match` to get the value if you don\'t know the type beforehand:\n          match value.clone() {\n              momento::storage::StorageValue::String(value) => println!("Got string value {}", value),\n              momento::storage::StorageValue::Bytes(value) => println!("Got bytes value {:?}", value),\n              momento::storage::StorageValue::Integer(value) => println!("Got integer value {}", value),\n              momento::storage::StorageValue::Double(value) => println!("Got double value {}", value),\n          }\n\n          // If you know the type you\'re expecting, you can `try_into()` it directly:\n          let found_value: String = value.try_into()?;\n          println!("Got value {}", found_value);\n      }\n  }',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,r.jsx)(t.h3,{id:"delete",children:"Delete"}),"\n",(0,r.jsx)(t.p,{children:"\u6307\u5b9a\u3055\u308c\u305f\u30ad\u30fc\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u524a\u9664\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"storeName"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u30b9\u30c8\u30a2\u306e\u540d\u524d"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"key"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"\u5024\u3092\u524a\u9664\u3059\u308b\u30ad\u30fc"})]})]})]}),"\n",(0,r.jsx)(o.r,{js:"const result = await storageClient.delete(storeName, 'test-key');\nswitch (result.type) {\n  case StorageDeleteResponse.Success:\n    console.log(\"Key 'test-key' deleted successfully\");\n    break;\n  case StorageDeleteResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to delete key 'test-key' from store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:'final DeleteResponse response = storageClient.delete("test-store", "test-key").join();\nif (response instanceof DeleteResponse.Success) {\n  System.out.println("Key \'test-key\' deleted successfully");\n} else if (response instanceof DeleteResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to delete key \'test-key\' from store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:'_, err := storageClient.Delete(ctx, &momento.StorageDeleteRequest{\n\tStoreName: storeName,\n\tKey:       "key",\n})\nif err != nil {\n\tpanic(err)\n}',csharp:"",php:'\n$delete_response = $storage_client->delete($store_name, "test-key");\nif ($delete_response->asSuccess()) {\n    print("Key \'test-key\' deleted successfully\\n");\n} elseif ($err = $delete_response->asError()) {\n    print("An error occurred while attempting to delete key \'test-key\' from store $store_name: {$err->errorCode()} - {$err->message()}\\n");\n}',rust:'  storage_client.delete(store_name, "key").await?;\n  println!("Deleted key from store {}", store_name);',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,r.jsx)(t.h2,{id:"sdk\u306b\u304a\u3051\u308bapi\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6",children:"SDK\u306b\u304a\u3051\u308bAPI\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6"}),"\n",(0,r.jsxs)(t.h1,{id:"\u69d8\u3005\u306asdk\u8a00\u8a9e\u306b\u304a\u3051\u308bapi\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6\u306b\u3064\u3044\u3066\u306f\u8a00\u8a9e\u30b5\u30dd\u30fc\u30c8\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044",children:["\u69d8\u3005\u306aSDK\u8a00\u8a9e\u306b\u304a\u3051\u308bAPI\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6\u306b\u3064\u3044\u3066\u306f\u3001",(0,r.jsx)(t.a,{href:"/ja/storage/develop/api-reference/language-support",children:"\u8a00\u8a9e\u30b5\u30dd\u30fc\u30c8\u30da\u30fc\u30b8"}),"\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,r.jsx)(t.h2,{id:"sidebar_position-12sidebar_label-language-supporttitle-language-api-support-matrixdescription-a-reference-as-to-which-momento-sdk-languages-support-each-apipagination_next-null",children:"sidebar_position: 12\nsidebar_label: Language Support\ntitle: Language API Support Matrix\ndescription: A reference as to which Momento SDK languages support each API\npagination_next: null"}),"\n",(0,r.jsx)(t.h2,{id:"momento-sdk\u306b\u304a\u3051\u308b\u30b9\u30c8\u30ec\u30fc\u30b8api\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6",children:"Momento SDK\u306b\u304a\u3051\u308b\u30b9\u30c8\u30ec\u30fc\u30b8API\u30b5\u30dd\u30fc\u30c8\u306e\u73fe\u72b6"}),"\n",(0,r.jsx)(t.h3,{children:"Storage"}),"\n",(0,r.jsx)(t.p,{children:"A matrix of SDK support for Momento Storage APIs"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Feature"}),(0,r.jsx)(t.th,{children:"Node.js"}),(0,r.jsx)(t.th,{children:"Web"}),(0,r.jsx)(t.th,{children:".NET"}),(0,r.jsx)(t.th,{children:"Python"}),(0,r.jsx)(t.th,{children:"Go"}),(0,r.jsx)(t.th,{children:"Java"}),(0,r.jsx)(t.th,{children:"Kotlin"}),(0,r.jsx)(t.th,{children:"Elixir"}),(0,r.jsx)(t.th,{children:"PHP"}),(0,r.jsx)(t.th,{children:"Rust"}),(0,r.jsx)(t.th,{children:"Ruby"}),(0,r.jsx)(t.th,{children:"Swift"}),(0,r.jsx)(t.th,{children:"Dart"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"createStore"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"deleteStore"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"listStores"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"put"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"get"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"delete"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u2705"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"}),(0,r.jsx)(t.td,{children:"\u274c"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},51441:(e,t,n)=>{n(96540)},35347:(e,t,n)=>{n.d(t,{r:()=>f});var r=n(11470),s=n(19365),o=n(21432),i=(n(96540),n(27293)),l=n(74848);const a="https://github.com/momentohq/client-sdk-javascript/blob/main/examples/nodejs/cache/doc-example-files/doc-examples-js-apis.ts",d="https://github.com/momentohq/client-sdk-python/blob/main/examples/py310/doc-examples-python-apis.py",c="https://github.com/momentohq/client-sdk-java/blob/main/examples/cache/src/main/java/momento/client/example/doc_examples/DocExamplesJavaAPIs.java",h="https://github.com/momentohq/client-sdk-kotlin/blob/main/examples/src/main/kotlin/software/momento/example/doc_examples/DocExamples.kt",p="https://github.com/momentohq/client-sdk-go/blob/main/examples/docs-examples/main.go",u="https://github.com/momentohq/client-sdk-dotnet/blob/main/examples/DocExampleApis/Program.cs",x="https://github.com/momentohq/client-sdk-php/blob/main/examples/doc-examples-php-apis.php",g="https://github.com/momentohq/client-sdk-rust/blob/main/example/rust/src/docs_examples/docs_examples.rs",m="https://github.com/momentohq/client-sdk-elixir/blob/main/examples/doc_examples.exs",j="https://github.com/momentohq/client-sdk-swift/blob/main/Examples/doc-example-apis/Sources/main.swift",y="https://github.com/momentohq/client-sdk-dart/blob/main/example/doc_example_apis/bin/doc_example_apis.dart",f=e=>{let{js:t,python:n,java:f,kotlin:S,go:b,csharp:v,php:_,rust:k,ruby:w,elixir:$,swift:A,dart:R,cli:C}=e;return t||n||f||S||b||v||_||k||w||$||A||R||C?(0,l.jsxs)(r.A,{children:[t&&(0,l.jsxs)(s.A,{value:"js",label:"JavaScript",children:[(0,l.jsx)(o.A,{language:"js",children:t}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:a,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),n&&(0,l.jsxs)(s.A,{value:"python",label:"Python",children:[(0,l.jsx)(o.A,{language:"python",children:n}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:d,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),f&&(0,l.jsxs)(s.A,{value:"java",label:"Java",children:[(0,l.jsx)(o.A,{language:"java",children:f}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:c,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),S&&(0,l.jsxs)(s.A,{value:"kotlin",label:"Kotlin",children:[(0,l.jsx)(o.A,{language:"kotlin",children:S}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:h,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),b&&(0,l.jsxs)(s.A,{value:"go",label:"Go",children:[(0,l.jsx)(o.A,{language:"go",children:b}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:p,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),v&&(0,l.jsxs)(s.A,{value:"csharp",label:"C#",children:[(0,l.jsx)(o.A,{language:"csharp",children:v}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:u,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),_&&(0,l.jsxs)(s.A,{value:"php",label:"PHP",children:[(0,l.jsx)(o.A,{language:"php",children:_}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:x,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),k&&(0,l.jsxs)(s.A,{value:"rust",label:"Rust",children:[(0,l.jsx)(o.A,{language:"rust",children:k}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:g,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),w&&(0,l.jsx)(s.A,{value:"ruby",label:"Ruby",children:(0,l.jsx)(o.A,{language:"ruby",children:w})}),$&&(0,l.jsxs)(s.A,{value:"elixir",label:"Elixir",children:[(0,l.jsx)(o.A,{language:"elixir",children:$}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:m,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),A&&(0,l.jsxs)(s.A,{value:"swift",label:"Swift",children:[(0,l.jsx)(o.A,{language:"swift",children:A}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:j,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),R&&(0,l.jsxs)(s.A,{value:"dart",label:"Dart",children:[(0,l.jsx)(o.A,{language:"dart",children:R}),(0,l.jsxs)(i.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:y,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),C&&(0,l.jsx)(s.A,{value:"cli",label:"CLI",children:(0,l.jsx)(o.A,{language:"cli",children:C})})]}):null}}}]);