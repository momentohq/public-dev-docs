"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[3276],{72089:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var o=r(74848),t=r(28453),i=(r(42821),r(70503));const s={sidebar_position:1,sidebar_label:"Config and Error Handling",displayed_sidebar:"platformSidebar",title:"Information about Momento Asynchronous APIs, Configuration and Error Handling in Rust",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in Rust",keywords:["momento","cache","configuration","error handling","exceptions","sdk","production ready","rust"]},a="Asynchronous APIs, Configuration, Error Handling, and Result Types in the Momento Rust SDK",d={id:"platform/sdks/rust/config-and-error-handling",title:"Information about Momento Asynchronous APIs, Configuration and Error Handling in Rust",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in Rust",source:"@site/docs/platform/sdks/rust/config-and-error-handling.mdx",sourceDirName:"platform/sdks/rust",slug:"/platform/sdks/rust/config-and-error-handling",permalink:"/platform/sdks/rust/config-and-error-handling",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/platform/sdks/rust/config-and-error-handling.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Config and Error Handling",displayed_sidebar:"platformSidebar",title:"Information about Momento Asynchronous APIs, Configuration and Error Handling in Rust",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in Rust",keywords:["momento","cache","configuration","error handling","exceptions","sdk","production ready","rust"]},sidebar:"platformSidebar",previous:{title:"Cache",permalink:"/platform/sdks/rust/cache"},next:{title:"Topics",permalink:"/platform/sdks/rust/topics"}},c={},l=[{value:"Asynchronous APIs",id:"asynchronous-apis",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Credential Providers",id:"credential-providers",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Enum Response Types, Type Coercion via <code>into</code> and <code>try_into</code>",id:"enum-response-types-type-coercion-via-into-and-try_into",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"asynchronous-apis-configuration-error-handling-and-result-types-in-the-momento-rust-sdk",children:"Asynchronous APIs, Configuration, Error Handling, and Result Types in the Momento Rust SDK"})}),"\n",(0,o.jsx)(n.h2,{id:"asynchronous-apis",children:"Asynchronous APIs"}),"\n",(0,o.jsxs)(n.p,{children:["All APIs in the SDK are asynchronous and return ",(0,o.jsx)(n.code,{children:"Future"}),"s. This means that you will need to use an\nasync runtime; we recommend ",(0,o.jsx)(n.a,{href:"https://tokio.rs",children:(0,o.jsx)(n.code,{children:"tokio"})}),". Examples that include this dependency\nand illustrate the use of ",(0,o.jsx)(n.code,{children:"#[tokio::main]"})," can be found in\n",(0,o.jsxs)(n.a,{href:"https://github.com/momentohq/client-sdk-rust/tree/main/example",children:["the ",(0,o.jsx)(n.code,{children:"example"})," directory of the github repo"]}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Pre-built configurations are provided, with settings such as timeouts and keep-alives tuned\nto appropriate values for different environments. For example:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"momento::cache::configurations::Laptop::latest()"})," - suitable for a development environment with lenient timeout\ns"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"momento::cache::configurations::InRegion::latest()"})," - suitable for a production configuration with more strict\ntimeouts."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["These configurations can be passed to the ",(0,o.jsx)(n.code,{children:"CacheClient"})," and ",(0,o.jsx)(n.code,{children:"TopicClient"})," builders.\nFor advanced use cases you can build your own configurations rather than using the pre-builts."]}),"\n",(0,o.jsx)(n.h2,{id:"credential-providers",children:"Credential Providers"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"CredentialProvider"})," struct is used to provide the API key for the Momento service. The two\nmost common factory functions for creating a ",(0,o.jsx)(n.code,{children:"CredentialProvider"})," are:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CredentialProvider::from_env_var"})," - reads the API key from an environment variable"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CredentialProvider::from_string"})," - takes the API key as a string; can be used when retrieving the key from a se\ncret manager, etc."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsxs)(n.p,{children:["Most APIs return a ",(0,o.jsx)(n.code,{children:"MomentoResult"}),", which is just a type alias for ",(0,o.jsx)(n.code,{children:"Result<T, MomentoError>"}),". You\ncan use a ",(0,o.jsx)(n.code,{children:"match"})," statement to handle the ",(0,o.jsx)(n.code,{children:"Result"})," or use the ",(0,o.jsx)(n.code,{children:"?"})," operator to propagate errors."]}),"\n",(0,o.jsxs)(n.h2,{id:"enum-response-types-type-coercion-via-into-and-try_into",children:["Enum Response Types, Type Coercion via ",(0,o.jsx)(n.code,{children:"into"})," and ",(0,o.jsx)(n.code,{children:"try_into"})]}),"\n",(0,o.jsxs)(n.p,{children:["Many APIs may have more than one type of response that they can return. For example, ",(0,o.jsx)(n.code,{children:"CacheClient::get"}),"\nmay return a cache hit or a cache miss. These response are represented as enums, which you can\ninteract with via a ",(0,o.jsx)(n.code,{children:"match"})," statement, or you can use ",(0,o.jsx)(n.code,{children:"try_into"})," to try to directly coerce the response\ninto your desired type."]}),"\n",(0,o.jsxs)(n.p,{children:["All Momento cache values are stored as ",(0,o.jsx)(n.code,{children:"vec<u8>"}),", but if you are using UTF-8 strings, you can use ",(0,o.jsx)(n.code,{children:"try_into"}),"\nfor these coercions as well."]}),"\n",(0,o.jsxs)(n.p,{children:["Here are a few examples of how you can interact with a ",(0,o.jsx)(n.code,{children:"CacheClient::get"})," response:"]}),"\n",(0,o.jsxs)(n.p,{children:["Using a ",(0,o.jsx)(n.code,{children:"match"}),":"]}),"\n",(0,o.jsx)(i.F,{language:"rust",code:'  let _item: String = match cache_client.get(cache_name, "key").await? {\n      GetResponse::Hit { value } => value.try_into()?,\n      GetResponse::Miss => return Err(anyhow::Error::msg("cache miss"))\n  };'}),"\n",(0,o.jsxs)(n.p,{children:["Or directly via ",(0,o.jsx)(n.code,{children:"try_into"}),":"]}),"\n",(0,o.jsx)(i.F,{language:"rust",code:'  let _item: String = cache_client.get(cache_name, "key").await?.try_into()?;'}),"\n",(0,o.jsxs)(n.p,{children:["If you are using Momento collection data types, such as lists and dictionaries, we support\n",(0,o.jsx)(n.code,{children:"into"})," for the main Rust types that you would expect to be able to use to represent these. For\nexample, for Momento dictionaries:"]}),"\n",(0,o.jsx)(i.F,{language:"rust",code:'  let _item: HashMap<String, String> = cache_client\n      .dictionary_fetch(cache_name, "dictionary_key")\n      .await?\n      .try_into()?;'})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},42821:(e,n,r)=>{r(96540)},70503:(e,n,r)=>{r.d(n,{F:()=>i});var o=r(21432),t=(r(96540),r(74848));const i=e=>{let{language:n,code:r}=e;return(0,t.jsx)(o.A,{language:n,children:r})}}}]);