"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[3730],{65993:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>x,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var t=n(74848),r=n(28453),c=(n(51441),n(35347));const s={sidebar_position:1,sidebar_label:"Dictionary",title:"Dictionary API reference",description:"Learn how to interact with the API for dictionary collection data types in Momento Cache."},l="Dictionary API reference for Momento Cache",a={id:"cache/develop/api-reference/dictionary-collections",title:"Dictionary API reference",description:"Learn how to interact with the API for dictionary collection data types in Momento Cache.",source:"@site/docs/cache/develop/api-reference/dictionary-collections.md",sourceDirName:"cache/develop/api-reference",slug:"/cache/develop/api-reference/dictionary-collections",permalink:"/cache/develop/api-reference/dictionary-collections",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/cache/develop/api-reference/dictionary-collections.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Dictionary",title:"Dictionary API reference",description:"Learn how to interact with the API for dictionary collection data types in Momento Cache."},sidebar:"cacheSidebar",previous:{title:"API Reference",permalink:"/cache/develop/api-reference/"},next:{title:"Lists",permalink:"/cache/develop/api-reference/list-collections"}},d={},o=[{value:"Dictionary methods",id:"dictionary-methods",level:2},{value:"DictionaryFetch",id:"dictionaryfetch",level:3},{value:"DictionaryGetField",id:"dictionarygetfield",level:3},{value:"DictionaryGetFields",id:"dictionarygetfields",level:3},{value:"DictionaryIncrement",id:"dictionaryincrement",level:3},{value:"DictionaryRemoveField",id:"dictionaryremovefield",level:3},{value:"DictionaryRemoveFields",id:"dictionaryremovefields",level:3},{value:"DictionarySetField",id:"dictionarysetfield",level:3},{value:"DictionarySetFields",id:"dictionarysetfields",level:3},{value:"DictionaryLength",id:"dictionarylength",level:3}];function h(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:n}=i;return n||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"dictionary-api-reference-for-momento-cache",children:"Dictionary API reference for Momento Cache"})}),"\n",(0,t.jsxs)(i.p,{children:["This page details the Momento API methods for the ",(0,t.jsx)(i.a,{href:"/cache/develop/basics/datatypes#dictionaries",children:"dictionary collection data type"}),"."]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["Momento collection types use a ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL"}),' to specify their TTL behavior. This is an optional argument for all "write" operations.']})}),"\n",(0,t.jsx)(i.h2,{id:"dictionary-methods",children:"Dictionary methods"}),"\n",(0,t.jsx)(i.h3,{id:"dictionaryfetch",children:"DictionaryFetch"}),"\n",(0,t.jsx)(i.p,{children:"Gets a dictionary item from a cache."}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"The name of the dictionary item to be retrieved."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsx)(i.p,{children:"The response object for DictionaryFetch returns three possible options, a cache hit, miss, or an error."}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Cache hit","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"valueDictionaryBytesBytes()"}),": Map<Bytes, Bytes>"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"valueDictionaryStringString()"}),": Map<String, String>"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"valueDictionaryStringBytes()"}),": Map<String, Bytes>"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"valueDictionaryBytesString()"}),": Map<Bytes, String>"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"toString()"}),": String - displays the field/value pairs, truncated."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Cache miss"}),"\n",(0,t.jsx)(i.li,{children:"Cache error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', 'test-value');\nconst result = await cacheClient.dictionaryFetch(cacheName, 'test-dictionary');\n\n// simplified style; assume the value was found\nconsole.log(`Dictionary fetched: ${result.value()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheDictionaryFetchResponse.Hit:\n    console.log('Dictionary fetched successfully- ');\n    result.valueMap().forEach((value, key) => {\n      console.log(`${key} : ${value}`);\n    });\n    break;\n  case CacheDictionaryFetchResponse.Miss:\n    console.log(`Dictionary 'test-dictionary' was not found in cache '${cacheName}'`);\n    break;\n  case CacheDictionaryFetchResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionaryFetch on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let response = cache_client\n      .dictionary_fetch(cache_name, "dictionary_name")\n      .await?;\n\n  match response {\n      DictionaryFetchResponse::Hit { value } => {\n          let dictionary: HashMap<String, String> =\n              value.try_into().expect("I stored a dictionary!");\n          println!("Fetched dictionary: {:?}", dictionary);\n      }\n      DictionaryFetchResponse::Miss => println!("Cache miss"),\n  }',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionarygetfield",children:"DictionaryGetField"}),"\n",(0,t.jsx)(i.p,{children:"Get one field from a dictionary item in the cache."}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be retrieved."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"field"}),(0,t.jsx)(i.td,{children:"String/Bytes"}),(0,t.jsx)(i.td,{children:"Name of the field in the dictionary item to be retrieved."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Cache hit"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"fieldString()"}),": String"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"fieldBytes()"}),": Bytes"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"valueString()"}),": String"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"valueBytes()"}),": Bytes"]}),"\n",(0,t.jsx)(i.p,{children:"These return the field and its value from the dictionary."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Cache miss"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"fieldString()"}),": String"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"fieldBytes()"}),": Bytes"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Cache error"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"fieldString()"}),": String"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"fieldBytes()"}),": Bytes"]}),"\n"]}),"\n"]}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', 'test-value');\nconst result = await cacheClient.dictionaryGetField(cacheName, 'test-dictionary', 'test-field');\n\n// simplified style; assume the value was found\nconsole.log(`Field 'test-field' fetched from dictionary: ${result.value()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheDictionaryGetFieldResponse.Hit:\n    console.log(\n      `Field ${result.fieldString()} fetched successfully from cache '${cacheName}' with value: ${result.value()}`\n    );\n    break;\n  case CacheDictionaryGetFieldResponse.Miss:\n    console.log(`Dictionary 'test-dictionary' was not found in cache '${cacheName}'`);\n    break;\n  case CacheDictionaryGetFieldResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionaryGetField on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let response = cache_client\n      .dictionary_get_field(cache_name, "dictionary_name", "field")\n      .await?;\n\n  match response {\n      DictionaryGetFieldResponse::Hit { value } => {\n          let value: String = value.try_into().expect("I stored a string!");\n          println!("Fetched value: {}", value);\n      }\n      DictionaryGetFieldResponse::Miss => println!("Cache miss"),\n  }',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionarygetfields",children:"DictionaryGetFields"}),"\n",(0,t.jsx)(i.p,{children:"Get one or more fields from a dictionary in the cache."}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be retrieved."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"fields"}),(0,t.jsx)(i.td,{children:"String[]/Bytes[]"}),(0,t.jsx)(i.td,{children:"Name of the field in the dictionary item to be retrieved."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Cache hit","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"valueDictionaryBytesBytes(): Map<Bytes, Bytes>"}),"\n",(0,t.jsx)(i.li,{children:"valueDictionaryStringString(): Map<String, String>"}),"\n",(0,t.jsx)(i.li,{children:"valueDictionaryStringBytes(): Map<String, Bytes>"}),"\n",(0,t.jsx)(i.li,{children:"valueDictionaryBytesString(): Map<Bytes, String>"}),"\n",(0,t.jsx)(i.li,{children:"toString(): String - displays truncated valueDictionaryStringString()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Cache miss"}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"await cacheClient.dictionarySetFields(\n  cacheName,\n  'test-dictionary',\n  new Map<string, string>([\n    ['key1', 'value1'],\n    ['key2', 'value2'],\n  ])\n);\nconst result = await cacheClient.dictionaryGetFields(cacheName, 'test-dictionary', ['key1', 'key2']);\n\n// simplified style; assume the value was found\nconsole.log(`Got fields from dictionary: ${result.value()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheDictionaryGetFieldsResponse.Hit:\n    console.log('Values fetched successfully- ');\n    result.valueMap().forEach((value, key) => {\n      console.log(`${key} : ${value}`);\n    });\n    break;\n  case CacheDictionaryGetFieldsResponse.Miss:\n    console.log(`Dictionary 'test-dictionary' was not found in cache '${cacheName}'`);\n    break;\n  case CacheDictionaryGetFieldsResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionaryGetFields on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let response = cache_client\n      .dictionary_get_fields(cache_name, "dictionary_name", vec!["field1", "field2"])\n      .await?;\n\n  match response {\n      DictionaryGetFieldsResponse::Hit { .. } => {\n          let dictionary: HashMap<String, String> = response\n              .try_into()\n              .expect("I stored a dictionary of strings!");\n          println!("Fetched dictionary: {:?}", dictionary);\n      }\n      DictionaryGetFieldsResponse::Miss => println!("Cache miss"),\n  }',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionaryincrement",children:"DictionaryIncrement"}),"\n",(0,t.jsx)(i.p,{children:"Adds to the value of a field, if and only if the existing value is a UTF-8 string representing a base 10 integer. If the field is missing from the dictionary, this method sets the field's value to the amount to increment by."}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsx)(i.p,{children:"The resulting incremented value must be between -9223372036854775808 and 9223372036854775807, ie. a signed 64-bit integer. If not, there will be an error response."})}),"\n",(0,t.jsx)(i.p,{children:"Examples:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["When the field does not exist, ",(0,t.jsx)(i.code,{children:"dictionaryIncrement(cache, dict, field, 10)"})," will set the field's value to 10."]}),"\n",(0,t.jsxs)(i.li,{children:["When the field = 5, ",(0,t.jsx)(i.code,{children:"dictionaryIncrement(cache, dict, field, 10)"})," will set the field's value to 15."]}),"\n",(0,t.jsx)(i.li,{children:"When the field = \u2018five\u2019, it will respond with a FailedPreconditionException error."}),"\n"]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be retrieved."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"field"}),(0,t.jsx)(i.td,{children:"String/Bytes"}),(0,t.jsx)(i.td,{children:"Name of the field in the dictionary item to be retrieved."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"amount"}),(0,t.jsx)(i.td,{children:"Integer"}),(0,t.jsx)(i.td,{children:"The quantity to add to the value. May be positive, negative, or zero. Defaults to 1."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"ttl"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL object"})}),(0,t.jsx)(i.td,{children:"This will come back as a TTL construct."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Success","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"value()"}),": integer - the new value after incrementing"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"toString()"}),": String - displays the value()"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', '10');\nconst result = await cacheClient.dictionaryIncrement(cacheName, 'test-dictionary', 'test-field', 1);\nswitch (result.type) {\n  case CacheDictionaryIncrementResponse.Success:\n    console.log(`Field value incremented by 1. Result - ${result.valueNumber()}`);\n    break;\n  case CacheDictionaryIncrementResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionaryIncrement on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let response = cache_client\n      .dictionary_increment(cache_name, "dictionary_name", "field", 1)\n      .await?;\n  println!("Incremented field in dictionary to {}", response.value);',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionaryremovefield",children:"DictionaryRemoveField"}),"\n",(0,t.jsx)(i.p,{children:"Removes a field from a dictionary item."}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be retrieved."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"field"}),(0,t.jsx)(i.td,{children:"String/Bytes"}),(0,t.jsx)(i.td,{children:"Name of the field in the dictionary item to be retrieved."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Success"}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', '10');\nconst result = await cacheClient.dictionaryRemoveField(cacheName, 'test-dictionary', 'test-field');\nswitch (result.type) {\n  case CacheDictionaryRemoveFieldResponse.Success:\n    console.log(\"Field removed successfully from dictionary 'test-dictionary'\");\n    break;\n  case CacheDictionaryRemoveFieldResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionaryRemoveField on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .dictionary_remove_field(cache_name, "dictionary_name", "field")\n      .await?;\n  println!("Field removed from dictionary");',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionaryremovefields",children:"DictionaryRemoveFields"}),"\n",(0,t.jsx)(i.p,{children:"Removes multiple fields from a dictionary item."}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be retrieved."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"fields"}),(0,t.jsx)(i.td,{children:"String[]/Bytes[]"}),(0,t.jsx)(i.td,{children:"Name of the field in the dictionary item to be retrieved."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Success"}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"await cacheClient.dictionarySetFields(\n  cacheName,\n  'test-dictionary',\n  new Map<string, string>([\n    ['key1', 'value1'],\n    ['key2', 'value2'],\n  ])\n);\nconst result = await cacheClient.dictionaryRemoveFields(cacheName, 'test-dictionary', ['key1', 'key2']);\nswitch (result.type) {\n  case CacheDictionaryRemoveFieldsResponse.Success:\n    console.log(\"Fields removed successfully from dictionary 'test-dictionary'\");\n    break;\n  case CacheDictionaryRemoveFieldsResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionaryRemoveFields on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .dictionary_remove_fields(cache_name, "dictionary_name", vec!["field1", "field2"])\n      .await?;\n  println!("Fields removed from dictionary");',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionarysetfield",children:"DictionarySetField"}),"\n",(0,t.jsxs)(i.p,{children:["Sets a field",":value"," pair in an existing dictionary item. If the dictionary item does not exist, it is created with the new field",":value"," pair."]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be set."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"field"}),(0,t.jsx)(i.td,{children:"String/Bytes"}),(0,t.jsx)(i.td,{children:"Name of the field in the dictionary item to be set."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"value"}),(0,t.jsx)(i.td,{children:"String/Bytes"}),(0,t.jsx)(i.td,{children:"Value for the field to be set."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"ttl"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL object"})}),(0,t.jsx)(i.td,{children:"TTL for the dictionary item in cache. This TTL takes precedence over the TTL used when initializing a cache client."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Success"}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"const result = await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', 'test-value');\nswitch (result.type) {\n  case CacheDictionarySetFieldResponse.Success:\n    console.log(`Field set successfully into cache '${cacheName}'`);\n    break;\n  case CacheDictionarySetFieldResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionarySetField on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .dictionary_set_field(cache_name.to_string(), "dictionary_name", "field", "value")\n      .await?;\n  println!("Set field in dictionary");',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionarysetfields",children:"DictionarySetFields"}),"\n",(0,t.jsxs)(i.p,{children:["Sets several field",":value"," pairs in a dictionary item. If the dictionary item does not exist, it is created with the new fields."]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be set."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"fields"}),(0,t.jsx)(i.td,{children:"String[]/Bytes[]"}),(0,t.jsxs)(i.td,{children:["Field",":value"," pair to be added to the dictionary item by the set operation."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"ttl"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL object"})}),(0,t.jsx)(i.td,{children:"TTL for the dictionary item in cache. This TTL takes precedence over the TTL used when initializing a cache client."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Success"}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"const result = await cacheClient.dictionarySetFields(\n  cacheName,\n  'test-dictionary',\n  new Map<string, string>([\n    ['key1', 'value1'],\n    ['key2', 'value2'],\n  ])\n);\nswitch (result.type) {\n  case CacheDictionarySetFieldsResponse.Success:\n    console.log(`Fields set successfully into cache '${cacheName}'`);\n    break;\n  case CacheDictionarySetFieldsResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheDictionarySetFields on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .dictionary_set_fields(\n          cache_name.to_string(),\n          "dictionary_name",\n          vec![("field1", "value1"), ("field2", "value2")],\n      )\n      .await?;\n  println!("Set fields in dictionary");',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,t.jsx)(i.h3,{id:"dictionarylength",children:"DictionaryLength"}),"\n",(0,t.jsx)(i.p,{children:"Get the length of an existing dictionary item"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"cacheName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the cache."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"dictionaryName"}),(0,t.jsx)(i.td,{children:"String"}),(0,t.jsx)(i.td,{children:"Name of the dictionary item to be checked."})]})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Method response object"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Hit","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"length()"}),": Number"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Miss"}),"\n",(0,t.jsx)(i.li,{children:"Error"}),"\n"]}),(0,t.jsxs)(i.p,{children:["See ",(0,t.jsx)(i.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,t.jsx)(c.r,{js:"",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let _length: u32 = cache_client\n      .dictionary_length(cache_name, "dictionary_name")\n      .await?\n      .try_into()\n      .expect("Expected a dictionary length!");',elixir:"",swift:"",dart:"",ts:""})]})}function x(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},51441:(e,i,n)=>{n(96540)},35347:(e,i,n)=>{n.d(i,{r:()=>g});var t=n(11470),r=n(19365),c=n(21432),s=(n(96540),n(27293)),l=n(74848);const a="https://github.com/momentohq/client-sdk-javascript/blob/main/examples/nodejs/cache/doc-example-files/doc-examples-js-apis.ts",d="https://github.com/momentohq/client-sdk-python/blob/main/examples/py310/doc-examples-python-apis.py",o="https://github.com/momentohq/client-sdk-java/blob/main/examples/cache/src/main/java/momento/client/example/doc_examples/DocExamplesJavaAPIs.java",h="https://github.com/momentohq/client-sdk-kotlin/blob/main/examples/src/main/kotlin/software/momento/example/doc_examples/DocExamples.kt",x="https://github.com/momentohq/client-sdk-go/blob/main/examples/docs-examples/main.go",j="https://github.com/momentohq/client-sdk-dotnet/blob/main/examples/DocExampleApis/Program.cs",p="https://github.com/momentohq/client-sdk-php/blob/main/examples/doc-examples-php-apis.php",m="https://github.com/momentohq/client-sdk-rust/blob/main/example/rust/src/docs_examples/docs_examples.rs",y="https://github.com/momentohq/client-sdk-elixir/blob/main/examples/doc_examples.exs",f="https://github.com/momentohq/client-sdk-swift/blob/main/Examples/doc-example-apis/Sources/main.swift",u="https://github.com/momentohq/client-sdk-dart/blob/main/example/doc_example_apis/bin/doc_example_apis.dart",g=e=>{let{js:i,python:n,java:g,kotlin:v,go:b,csharp:S,php:w,rust:D,ruby:F,elixir:N,swift:_,dart:k,cli:C}=e;return i||n||g||v||b||S||w||D||F||N||_||k||C?(0,l.jsxs)(t.A,{children:[i&&(0,l.jsxs)(r.A,{value:"js",label:"JavaScript",children:[(0,l.jsx)(c.default,{language:"js",children:i}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:a,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),n&&(0,l.jsxs)(r.A,{value:"python",label:"Python",children:[(0,l.jsx)(c.default,{language:"python",children:n}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:d,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),g&&(0,l.jsxs)(r.A,{value:"java",label:"Java",children:[(0,l.jsx)(c.default,{language:"java",children:g}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:o,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),v&&(0,l.jsxs)(r.A,{value:"kotlin",label:"Kotlin",children:[(0,l.jsx)(c.default,{language:"kotlin",children:v}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:h,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),b&&(0,l.jsxs)(r.A,{value:"go",label:"Go",children:[(0,l.jsx)(c.default,{language:"go",children:b}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:x,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),S&&(0,l.jsxs)(r.A,{value:"csharp",label:"C#",children:[(0,l.jsx)(c.default,{language:"csharp",children:S}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:j,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),w&&(0,l.jsxs)(r.A,{value:"php",label:"PHP",children:[(0,l.jsx)(c.default,{language:"php",children:w}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:p,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),D&&(0,l.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,l.jsx)(c.default,{language:"rust",children:D}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:m,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),F&&(0,l.jsx)(r.A,{value:"ruby",label:"Ruby",children:(0,l.jsx)(c.default,{language:"ruby",children:F})}),N&&(0,l.jsxs)(r.A,{value:"elixir",label:"Elixir",children:[(0,l.jsx)(c.default,{language:"elixir",children:N}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:y,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),_&&(0,l.jsxs)(r.A,{value:"swift",label:"Swift",children:[(0,l.jsx)(c.default,{language:"swift",children:_}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:f,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),k&&(0,l.jsxs)(r.A,{value:"dart",label:"Dart",children:[(0,l.jsx)(c.default,{language:"dart",children:k}),(0,l.jsxs)(s.A,{type:"info",children:["Full example code and imports can be found ",(0,l.jsx)("a",{href:u,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),C&&(0,l.jsx)(r.A,{value:"cli",label:"CLI",children:(0,l.jsx)(c.default,{language:"cli",children:C})})]}):null}}}]);