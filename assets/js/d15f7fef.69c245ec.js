"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[4729],{6967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var s=t(74848),i=t(28453),r=(t(51441),t(35347)),o=(t(42821),t(70503));const c={sidebar_position:20,title:"Best practices for async processing with Momento Topics",sidebar_label:"Running background tasks",description:"Learn best practices around using Momento Topics and webhooks to process data asynchronously in your event-driven architectures.",keywords:["topics","webhooks","eda","momento","event-driven architecture","Step Functions"]},a="Use Momento Topics to process data asynchronously",l={id:"topics/patterns/running-background-tasks",title:"Best practices for async processing with Momento Topics",description:"Learn best practices around using Momento Topics and webhooks to process data asynchronously in your event-driven architectures.",source:"@site/docs/topics/patterns/running-background-tasks.md",sourceDirName:"topics/patterns",slug:"/topics/patterns/running-background-tasks",permalink:"/topics/patterns/running-background-tasks",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/topics/patterns/running-background-tasks.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Best practices for async processing with Momento Topics",sidebar_label:"Running background tasks",description:"Learn best practices around using Momento Topics and webhooks to process data asynchronously in your event-driven architectures.",keywords:["topics","webhooks","eda","momento","event-driven architecture","Step Functions"]},sidebar:"topicsSidebar",previous:{title:"Instant messaging",permalink:"/topics/patterns/instant-messaging"},next:{title:"Identifying unique resources",permalink:"/topics/patterns/token_id_webhook"}},p={},u=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Getting Started",id:"getting-started",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"use-momento-topics-to-process-data-asynchronously",children:"Use Momento Topics to process data asynchronously"})}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.a,{href:"../",children:"Momento Topics"}),", you can subscribe to messages on a topic, as well as publish messages to a different topic. ",(0,s.jsx)(n.a,{href:"../webhooks/overview",children:"Webhooks"})," allow you to connect these topics to stateless consumers, which can then process these events asynchronously. Whether this is aggregating events by ",(0,s.jsx)(n.code,{children:"topic_id"}),", saving each event to a database, or using the payload to trigger a Step function workflow, webhooks give you the flexibility to process these events how you want to."]}),"\n",(0,s.jsxs)(n.p,{children:["The key to asynchronously processing these events is to use ",(0,s.jsx)(n.em,{children:"multiple"})," topics. An inbound topic, which the webhook listens to, and a single, or multiple, outbound topics which publish the processed data."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Architecture",src:t(84266).A+"",width:"1260",height:"640"})}),"\n",(0,s.jsxs)(n.p,{children:["In this diagram, ",(0,s.jsx)(n.code,{children:"Topic 1"})," is the ",(0,s.jsx)(n.code,{children:"inbound"})," topic, and ",(0,s.jsx)(n.code,{children:"Topic 2"})," is the ",(0,s.jsx)(n.code,{children:"outbound"})," topic."]}),"\n",(0,s.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["A public-facing endpoint to receive webhook events. This endpoint must accept POST requests and be able to receive inbound calls from Momento. More detail about the structure of this event is ",(0,s.jsx)(n.a,{href:"../webhooks/overview#example-event",children:"described here"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://console.gomomento.com/caches/create",children:"Create a cache in the Momento console"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/topics/webhooks/creating-a-webhook",children:"Create a webhook"})," for the cache. Assign the webhook destination to the public facing endpoint."]}),"\n",(0,s.jsx)(n.li,{children:"Add code to the webhook to process the incoming messages. For example, if your webhook is implemented as an AWS Lambda function behind an API Gateway, then here is some very simple code that processes the incoming message, converts it to upper case, and then publishes it to the outbound topic:"}),"\n"]}),"\n",(0,s.jsx)(o.F,{language:"javascript",code:"import {APIGatewayProxyEvent, APIGatewayProxyResult} from 'aws-lambda';\n\nimport {TopicClient, CredentialProvider} from '@gomomento/sdk';\n\ninterface MomentoWebhookEvent {\n  cache: string;\n  topic: string;\n  event_timestamp: number;\n  publish_timestamp: number;\n  topic_sequence_number: number;\n  token_id: string;\n  text: string;\n}\n\nconst momento = new TopicClient({\n  credentialProvider: CredentialProvider.fromString('<the api key>'),\n});\n\nexport const lambdaHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  const webhookEvent: MomentoWebhookEvent = JSON.parse(event.body!) as MomentoWebhookEvent;\n  // simply take the current message, uppercase it, and publish to a new topic\n  await momento.publish(webhookEvent.cache, 'topic 2', webhookEvent.text.toUpperCase());\n  return {\n    statusCode: 200,\n    body: JSON.stringify({status: 'success'}),\n  };\n};\n"}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["On the client side, add a subscriber to this new ",(0,s.jsx)(n.code,{children:"topic 2"})]}),"\n"]}),"\n",(0,s.jsx)(r.r,{js:"const result = await topicClient.subscribe(cacheName, 'test-topic', {\n  onError: () => {\n    return;\n  },\n  onItem: (item: TopicItem) => {\n    console.log(`Received an item on subscription for 'test-topic': ${item.value().toString()}`);\n    return;\n  },\n});\nswitch (result.type) {\n  case TopicSubscribeResponse.Subscription:\n    console.log(\"Successfully subscribed to topic 'test-topic'\");\n\n    console.log(\"Publishing a value to the topic 'test-topic'\");\n    // Publish a value\n    await topicClient.publish(cacheName, 'test-topic', 'test-value');\n\n    console.log('Waiting for the published value to be received.');\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Need to close the stream before the example ends or else the example will hang.\n    result.unsubscribe();\n    break;\n  case TopicSubscribeResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to subscribe to the topic 'test-topic' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:'response = await topic_client.subscribe("cache", "my_topic")\nmatch response:\n    case TopicSubscribe.Error() as error:\n        print(f"Error subscribing to topic: {error.message}")\n    case TopicSubscribe.SubscriptionAsync() as subscription:\n        await topic_client.publish("cache", "my_topic", "my_value")\n        async for item in subscription:\n            match item:\n                case TopicSubscriptionItem.Text():\n                    print(f"Received message as string: {item.value}")\n                    return\n                case TopicSubscriptionItem.Binary():\n                    print(f"Received message as bytes: {item.value!r}")\n                    return\n                case TopicSubscriptionItem.Error():\n                    print(f"Error with received message: {item.inner_exception.message}")\n                    return\n\n',java:"",kotlin:'when (val response = topicClient.subscribe("test-cache", "test-topic")) {\n    is TopicSubscribeResponse.Subscription -> coroutineScope {\n        launch {\n            withTimeoutOrNull(2000) {\n                response.collect { item ->\n                    when (item) {\n                        is TopicMessage.Text -> println("Received text message: ${item.value}")\n                        is TopicMessage.Binary -> println("Received binary message: ${item.value}")\n                        is TopicMessage.Error -> throw RuntimeException(\n                            "An error occurred reading messages from topic \'test-topic\': ${item.errorCode}", item\n                        )\n                    }\n                }\n            }\n        }\n    }\n\n    is TopicSubscribeResponse.Error -> throw RuntimeException(\n        "An error occurred while attempting to subscribe to topic \'test-topic\': ${response.errorCode}", response\n    )\n}',go:'// Instantiate subscriber\nsub, subErr := topicClient.Subscribe(ctx, &momento.TopicSubscribeRequest{\n\tCacheName: cacheName,\n\tTopicName: "test-topic",\n})\nif subErr != nil {\n\tpanic(subErr)\n}\n\ntime.Sleep(time.Second)\n_, pubErr := topicClient.Publish(ctx, &momento.TopicPublishRequest{\n\tCacheName: cacheName,\n\tTopicName: "test-topic",\n\tValue:     momento.String("test-message"),\n})\nif pubErr != nil {\n\tpanic(pubErr)\n}\ntime.Sleep(time.Second)\n\n// Receive only subscription items with messages\nitem, err := sub.Item(ctx)\nif err != nil {\n\tpanic(err)\n}\nswitch msg := item.(type) {\ncase momento.String:\n\tfmt.Printf("received message as string: \'%v\'\\n", msg)\ncase momento.Bytes:\n\tfmt.Printf("received message as bytes: \'%v\'\\n", msg)\n}\n\n// Receive all subscription events (messages, discontinuities, heartbeats)\nevent, err := sub.Event(ctx)\nif err != nil {\n\tpanic(err)\n}\nswitch e := event.(type) {\ncase momento.TopicHeartbeat:\n\tfmt.Printf("received heartbeat\\n")\ncase momento.TopicDiscontinuity:\n\tfmt.Printf("received discontinuity\\n")\ncase momento.TopicItem:\n\tfmt.Printf(\n\t\t"received message with sequence number %d and publisher id %s: %v \\n",\n\t\te.GetTopicSequenceNumber(),\n\t\te.GetPublisherId(),\n\t\te.GetValue(),\n\t)\n}',csharp:'var produceCancellation = new CancellationTokenSource();\r\nproduceCancellation.CancelAfter(5_000);\r\n\nvar subscribeResponse = await topicClient.SubscribeAsync("test-cache", "test-topic");\r\nswitch (subscribeResponse)\r\n{\r\n    case TopicSubscribeResponse.Subscription subscription:\r\n        // Note: use `WithCancellation` to filter only the `TopicMessage` types\r\n        var cancellableSubscription = subscription.WithCancellationForAllEvents(produceCancellation.Token);\r\n\n        await Task.Delay(1_000);\r\n        await topicClient.PublishAsync("test-cache", "test-topic", "test-topic-value");\r\n        await Task.Delay(1_000);\r\n\n        await foreach (var topicEvent in cancellableSubscription)\r\n        {\r\n            switch (topicEvent)\r\n            {\r\n                case TopicMessage.Binary:\r\n                    Console.WriteLine("Received unexpected binary message from topic.");\r\n                    break;\r\n                case TopicMessage.Text text:\r\n                    Console.WriteLine($"Received string message from topic: {text.Value}");\r\n                    break;\r\n                case TopicSystemEvent.Heartbeat:\r\n                    Console.WriteLine("Received heartbeat from topic.");\r\n                    break;\r\n                case TopicSystemEvent.Discontinuity discontinuity:\r\n                    Console.WriteLine($"Received discontinuity from topic: {discontinuity}");\r\n                    break;\r\n                case TopicMessage.Error error:\r\n                    throw new Exception($"An error occurred while receiving topic message: {error.ErrorCode}: {error}");\r\n                default:\r\n                    throw new Exception("Bad message received");\r\n            }\r\n        }\r\n        subscription.Dispose();\r\n        break;\r\n    case TopicSubscribeResponse.Error error:\r\n        throw new Exception($"An error occurred subscribing to a topic: {error.ErrorCode}: {error}");\r\n}\r',php:"",rust:'  // Make a subscription\n  let mut subscription = topic_client\n      .subscribe(cache_name, topic_name)\n      .await\n      .expect("subscribe rpc failed");\n\n  // Consume the subscription\n  while let Some(item) = subscription.next().await {\n      println!("Received subscription item: {item:?}")\n  }',elixir:"",swift:'let subscribeResponse = await topicClient.subscribe(cacheName: cacheName, topicName: "topic")\n\n#if swift(>=5.9)\nlet subscription = switch subscribeResponse {\n    case .error(let err): fatalError("Error subscribing to topic: \\(err)")\n    case .subscription(let sub): sub\n}\n#else \nlet subscription: TopicSubscription\nswitch subscribeResponse {\n    case .error(let err):\n        fatalError("Error subscribing to topic: \\(err)")\n    case .subscription(let sub):\n        subscription = sub\n}\n#endif\n\n// unsubscribe in 5 seconds\nTask {\n    try await Task.sleep(nanoseconds: 5_000_000_000)\n    subscription.unsubscribe()\n}\n\n// loop over messages as they are received\nfor try await item in subscription.stream {\n    var value: String = ""\n    switch item {\n    case .itemText(let textItem):\n        value = textItem.value\n        print("Subscriber recieved text message: \\(value)")\n    case .itemBinary(let binaryItem):\n        value = String(decoding: binaryItem.value, as: UTF8.self)\n        print("Subscriber recieved binary message: \\(value)")\n    case .error(let err):\n        print("Subscriber received error: \\(err)")\n    }\n}',dart:'final subscription = await topicClient.subscribe("test-cache", "test-topic");\nfinal messageStream = switch (subscription) {\n  TopicSubscription() => subscription.stream,\n  TopicSubscribeError() => throw Exception(\n      "Subscribe error: ${subscription.errorCode} ${subscription.message}"),\n};\n\n// cancel subscription 5 seconds from now\nTimer(const Duration(seconds: 5), () {\n  print("Cancelling subscription!");\n  subscription.unsubscribe();\n});\n\ntry {\n  await for (final msg in messageStream) {\n    switch (msg) {\n      case TopicSubscriptionItemBinary():\n        print("Binary value: ${msg.value}");\n      case TopicSubscriptionItemText():\n        print("String value: ${msg.value}");\n    }\n  }\n} catch (e) {\n  print("Runtime type: ${e.runtimeType}");\n  print("Error with await for loop: $e");\n}',ts:""}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["Begin publishing messages to the topic that the webhook is listening to. You can use the ",(0,s.jsx)(n.a,{href:"/topics/api-reference",children:"Momento SDK"})," to publish to the topic."]}),"\n"]}),"\n",(0,s.jsx)(r.r,{js:"const result = await topicClient.publish(cacheName, 'test-topic', 'test-topic-value');\nswitch (result.type) {\n  case TopicPublishResponse.Success:\n    console.log(\"Value published to topic 'test-topic'\");\n    break;\n  case TopicPublishResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to publish to the topic 'test-topic' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:'response = await topic_client.publish("cache", "my_topic", "my_value")\nmatch response:\n    case TopicPublish.Success():\n        print("Successfully published a message")\n    case TopicPublish.Error() as error:\n        print(f"Error publishing a message: {error.message}")\n\n',java:"",kotlin:'when (val response = topicClient.publish("test-cache", "test-topic", "test-message")) {\n    is TopicPublishResponse.Success -> println("Message published successfully")\n    is TopicPublishResponse.Error -> throw RuntimeException(\n        "An error occurred while attempting to publish message to topic \'test-topic\': ${response.errorCode}",\n        response\n    )\n}',go:'_, err := topicClient.Publish(ctx, &momento.TopicPublishRequest{\n\tCacheName: cacheName,\n\tTopicName: "test-topic",\n\tValue:     momento.String("test-message"),\n})\nif err != nil {\n\tpanic(err)\n}',csharp:'var publishResponse =\r\n     await topicClient.PublishAsync("test-cache", "test-topic", "test-topic-value");\r\nswitch (publishResponse)\r\n{\r\n    case TopicPublishResponse.Success:\r\n        Console.WriteLine("Successfully published message to \'test-topic\'");\r\n        break;\r\n    case TopicPublishResponse.Error error:\r\n        throw new Exception($"An error occurred while publishing topic message: {error.ErrorCode}: {error}");\r\n}\r',php:"",rust:'  topic_client\n      .publish(cache_name, topic_name, "Hello, Momento!")\n      .await?;\n  println!("Published message");',elixir:"",swift:'let result = await topicClient.publish(\n    cacheName: cacheName,\n    topicName: "topic",\n    value: "value"\n)\nswitch result {\ncase .success(_):\n    print("Successfully published message!")\ncase .error(let err):\n    print("Unable to publish message: \\(err)")\n    exit(1)\n}',dart:'final result = await topicClient.publish("cache", "topic", "hello message!");\nswitch (result) {\n  case TopicPublishSuccess():\n    print("Successful publish!");\n  case TopicPublishError():\n    print("Publish error: ${result.errorCode} ${result.message}");\n}',ts:""}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsxs)(n.li,{children:["The subscriber to ",(0,s.jsx)(n.code,{children:"topic 2"})," should now be receiving the uppercase messages, and logging the messages to the console!"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["And that is it! This is an extremely basic example of string conversion, but this pattern holds true for more advanced asynchronous processing, such as saving state to a db or publishing messages to a queue. This topics pattern allows for clients to be completely agnostic of the downstream consumer, if the load for the application outgrows an environment such as API Gateway + Lambda function, you can easily replace it with containers or EC2 instances. For a more complete example of using webhooks for event processing, checkout our EventBridge ",(0,s.jsx)(n.a,{href:"/topics/integrations/lambda-handler",children:"example"}),", and our ",(0,s.jsx)(n.a,{href:"https://www.gomomento.com/blog/how-to-use-webhooks-and-momento-topics-to-build-a-multi-language-chat-app",children:"blog post"})," about using this pattern to create a multi-language chat application."]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},42821:(e,n,t)=>{t(96540)},70503:(e,n,t)=>{t.d(n,{F:()=>r});var s=t(21432),i=(t(96540),t(74848));const r=e=>{let{language:n,code:t}=e;return(0,i.jsx)(s.A,{language:n,children:t})}},51441:(e,n,t)=>{t(96540)},35347:(e,n,t)=>{t.d(n,{r:()=>f});var s=t(11470),i=t(19365),r=t(21432),o=(t(96540),t(27293)),c=t(74848);const a="https://github.com/momentohq/client-sdk-javascript/blob/main/examples/nodejs/cache/doc-example-files/doc-examples-js-apis.ts",l="https://github.com/momentohq/client-sdk-python/blob/main/examples/py310/doc-examples-python-apis.py",p="https://github.com/momentohq/client-sdk-java/blob/main/examples/cache/src/main/java/momento/client/example/doc_examples/DocExamplesJavaAPIs.java",u="https://github.com/momentohq/client-sdk-kotlin/blob/main/examples/src/main/kotlin/software/momento/example/doc_examples/DocExamples.kt",h="https://github.com/momentohq/client-sdk-go/blob/main/examples/docs-examples/main.go",m="https://github.com/momentohq/client-sdk-dotnet/blob/main/examples/DocExampleApis/Program.cs",b="https://github.com/momentohq/client-sdk-php/blob/main/examples/doc-examples-php-apis.php",d="https://github.com/momentohq/client-sdk-rust/blob/main/example/rust/src/docs_examples/docs_examples.rs",g="https://github.com/momentohq/client-sdk-elixir/blob/main/examples/doc_examples.exs",x="https://github.com/momentohq/client-sdk-swift/blob/main/Examples/doc-example-apis/Sources/main.swift",v="https://github.com/momentohq/client-sdk-dart/blob/main/example/doc_example_apis/bin/doc_example_apis.dart",f=e=>{let{js:n,python:t,java:f,kotlin:w,go:y,csharp:j,php:k,rust:T,ruby:S,elixir:A,swift:E,dart:_,cli:C}=e;return n||t||f||w||y||j||k||T||S||A||E||_||C?(0,c.jsxs)(s.A,{children:[n&&(0,c.jsxs)(i.A,{value:"js",label:"JavaScript",children:[(0,c.jsx)(r.A,{language:"js",children:n}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:a,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),t&&(0,c.jsxs)(i.A,{value:"python",label:"Python",children:[(0,c.jsx)(r.A,{language:"python",children:t}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:l,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),f&&(0,c.jsxs)(i.A,{value:"java",label:"Java",children:[(0,c.jsx)(r.A,{language:"java",children:f}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:p,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),w&&(0,c.jsxs)(i.A,{value:"kotlin",label:"Kotlin",children:[(0,c.jsx)(r.A,{language:"kotlin",children:w}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:u,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),y&&(0,c.jsxs)(i.A,{value:"go",label:"Go",children:[(0,c.jsx)(r.A,{language:"go",children:y}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:h,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),j&&(0,c.jsxs)(i.A,{value:"csharp",label:"C#",children:[(0,c.jsx)(r.A,{language:"csharp",children:j}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:m,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),k&&(0,c.jsxs)(i.A,{value:"php",label:"PHP",children:[(0,c.jsx)(r.A,{language:"php",children:k}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:b,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),T&&(0,c.jsxs)(i.A,{value:"rust",label:"Rust",children:[(0,c.jsx)(r.A,{language:"rust",children:T}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:d,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),S&&(0,c.jsx)(i.A,{value:"ruby",label:"Ruby",children:(0,c.jsx)(r.A,{language:"ruby",children:S})}),A&&(0,c.jsxs)(i.A,{value:"elixir",label:"Elixir",children:[(0,c.jsx)(r.A,{language:"elixir",children:A}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:g,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),E&&(0,c.jsxs)(i.A,{value:"swift",label:"Swift",children:[(0,c.jsx)(r.A,{language:"swift",children:E}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:x,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),_&&(0,c.jsxs)(i.A,{value:"dart",label:"Dart",children:[(0,c.jsx)(r.A,{language:"dart",children:_}),(0,c.jsxs)(o.A,{type:"info",children:["Full example code and imports can be found ",(0,c.jsx)("a",{href:v,target:"_blank",rel:"noopener noreferrer",children:"here"})]})]}),C&&(0,c.jsx)(i.A,{value:"cli",label:"CLI",children:(0,c.jsx)(r.A,{language:"cli",children:C})})]}):null}},84266:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/asynchronous-processing-903673eec41b392af260e4aec0d8e2e2.png"}}]);