"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[1789],{34578:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var a=r(74848),o=r(28453),s=(r(42821),r(70503));const t={sidebar_position:1,title:"Mapping leaderboard IDs to strings",sidebar_label:"Mapping leaderboard IDs to strings",description:"Learn how to map numeric leaderboard IDs to arbitrary strings.",keywords:["momento","leaderboard","gaming","serverless"]},d="How to map numeric leaderboard IDs to arbitrary strings",i={id:"leaderboards/patterns/map-id-to-string",title:"Mapping leaderboard IDs to strings",description:"Learn how to map numeric leaderboard IDs to arbitrary strings.",source:"@site/docs/leaderboards/patterns/map-id-to-string.md",sourceDirName:"leaderboards/patterns",slug:"/leaderboards/patterns/map-id-to-string",permalink:"/leaderboards/patterns/map-id-to-string",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/leaderboards/patterns/map-id-to-string.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Mapping leaderboard IDs to strings",sidebar_label:"Mapping leaderboard IDs to strings",description:"Learn how to map numeric leaderboard IDs to arbitrary strings.",keywords:["momento","leaderboard","gaming","serverless"]},sidebar:"leaderboardSidebar",previous:{title:"Patterns"},next:{title:"Quotas and Limits",permalink:"/leaderboards/limits"}},c={},l=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"how-to-map-numeric-leaderboard-ids-to-arbitrary-strings",children:"How to map numeric leaderboard IDs to arbitrary strings"})}),"\n",(0,a.jsx)(n.p,{children:"Momento Leaderboards elements are uniquely identified by an unsigned 64-bit number that can represent a player identifier, session identifier, browser identifier or any other kind of identifier you want to use. An id can only appear in a leaderboard one time, meaning you can't have two scores for one player unless that player has two ids!"}),"\n",(0,a.jsx)(n.p,{children:"In some cases, you may want to associate that ID with some other information, such as a player's name, for a more human-friendly leaderboard display.\nYou can use a dictionary to convert between the string and ID representations as shown below."}),"\n",(0,a.jsx)(s.F,{language:"javascript",code:"import {\n  PreviewLeaderboardClient,\n  LeaderboardConfigurations,\n  CredentialProvider,\n  CacheClient,\n  Configurations,\n  LeaderboardOrder,\n  CreateCacheResponse,\n  LeaderboardUpsertResponse,\n  LeaderboardFetchResponse,\n  LeaderboardDeleteResponse,\n} from '@gomomento/sdk';\n\nasync function main() {\n  // 1. Create a CacheClient to connect to Momento\n  const cacheClient = await CacheClient.create({\n    configuration: Configurations.Laptop.v1(),\n    credentialProvider: CredentialProvider.fromEnvironmentVariable({\n      environmentVariableName: 'MOMENTO_API_KEY',\n    }),\n    defaultTtlSeconds: 60,\n  });\n\n  // 2. Create a cache for the leaderboard to live in\n  const createCacheResponse = await cacheClient.createCache('my-cache');\n  switch (createCacheResponse.type) {\n    case CreateCacheResponse.AlreadyExists:\n      console.log('cache already exists');\n      break;\n    case CreateCacheResponse.Success:\n      console.log('cache created');\n      break;\n    case CreateCacheResponse.Error:\n      console.log('cache already exists');\n  }\n\n  // 3. Create a Leaderboard client\n  const client = new PreviewLeaderboardClient({\n    configuration: LeaderboardConfigurations.Laptop.v1(),\n    credentialProvider: CredentialProvider.fromEnvironmentVariable({\n      environmentVariableName: 'MOMENTO_API_KEY',\n    }),\n  });\n\n  // 4. Create a leaderboard with given cache and leaderboard names\n  const leaderboard = client.leaderboard('my-cache', 'my-leaderboard');\n\n  // 5. Create a mapping between element IDs and arbitrary strings\n  const id2name: Record<number, string> = {\n    123: 'Alice',\n    456: 'Bob',\n    789: 'Charlie',\n    1234: 'David',\n    5678: 'Eve',\n  };\n\n  // 6. Upsert the elements along with some scores\n  const upsertElements: Record<number, number> = {};\n  for (const id of Object.keys(id2name)) {\n    upsertElements[Number(id)] = Math.floor(Math.random() * 1000);\n  }\n  const upsertResponse = await leaderboard.upsert(upsertElements);\n  switch (upsertResponse.type) {\n    case LeaderboardUpsertResponse.Success:\n      console.log('Upsert success!');\n      break;\n    case LeaderboardUpsertResponse.Error:\n      console.log('Upsert error:', upsertResponse.message());\n      break;\n  }\n\n  // 7. Fetch the top 5 elements in the leaderboard and print scores and corresponding strings\n  const fetchResponse = await leaderboard.fetchByRank(0, 5, {order: LeaderboardOrder.Descending});\n  switch (fetchResponse.type) {\n    case LeaderboardFetchResponse.Success: {\n      const elements = fetchResponse.values();\n      console.log('------------Top 5 Leaderboard-------------');\n      console.log('------------------------------------------');\n      for (const element of elements) {\n        console.log(`${id2name[element.id]}: ${element.score}`);\n      }\n      console.log('------------------------------------------');\n      break;\n    }\n    case LeaderboardFetchResponse.Error:\n      console.log('Fetch error:', fetchResponse.message());\n      break;\n  }\n\n  // 8. Delete the entire leaderboard when done.\n  // Leaderboard items have a default 7-day TTL so make sure to clean up\n  // all unnecessary elements when no longer needed.\n  const deleteResp = await leaderboard.delete();\n  switch (deleteResp.type) {\n    case LeaderboardDeleteResponse.Success:\n      console.log('Delete leaderboard success');\n      break;\n    case LeaderboardDeleteResponse.Error:\n      console.log('Delete leaderboard error:', deleteResp.message());\n      break;\n  }\n}\n\nmain()\n  .then(() => {\n    console.log('Leaderboard example completed!');\n  })\n  .catch((e: Error) => {\n    console.error(`Uncaught exception while running example: ${e.message}`);\n    throw e;\n  });\n"}),"\n",(0,a.jsx)(n.p,{children:"When the example runs, you'll see a leaderboard printed out like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"------------Top 5 Leaderboard-------------\n------------------------------------------\nBob: 772\nCharlie: 685\nDavid: 483\nAlice: 450\nEve: 13\n------------------------------------------\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},42821:(e,n,r)=>{r(96540)},70503:(e,n,r)=>{r.d(n,{F:()=>s});var a=r(21432),o=(r(96540),r(74848));const s=e=>{let{language:n,code:r}=e;return(0,o.jsx)(a.A,{language:n,children:r})}}}]);